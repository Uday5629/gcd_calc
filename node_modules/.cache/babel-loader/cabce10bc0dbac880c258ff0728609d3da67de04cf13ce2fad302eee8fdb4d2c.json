{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ShriGanU\\\\OneDrive - Unisys\\\\Desktop\\\\Vs code\\\\gcd01\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction gcd(a, b) {\n  // Euclidean algorithm to find GCD\n  while (b !== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\nfunction gcdOfArray(numbers) {\n  if (numbers.length === 0) {\n    return null; // No numbers provided\n  }\n  let result = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    result = gcd(result, numbers[i]);\n  }\n  return result;\n}\nfunction GCDForm() {\n  _s();\n  const handleSubmit = event => {\n    event.preventDefault(); // Prevent default form submission\n\n    const inputNumbers = event.target.elements.numbers.value;\n    const numbersArray = inputNumbers.split(\",\").map(Number); // Convert string input to array of numbers\n\n    const gcdResult = gcdOfArray(numbersArray);\n    if (gcdResult !== null) {\n      // Update state to display the result\n      setResult(\"GCD of \" + inputNumbers + \" is \" + gcdResult);\n    } else {\n      // Update state to display an error message\n      setResult(\"Please enter valid numbers\");\n    }\n  };\n\n  // State to store the result or error message\n  const [result, setResult] = React.useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GCD Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"numbers\",\n        children: \"Enter numbers separated by commas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 84\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"numbers\",\n        name: \"numbers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 66\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Calculate GCD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(GCDForm, \"+gLbWhCz1wxZi8Q3iizH9D49vKk=\");\n_c = GCDForm;\nexport default GCDForm; // Exporting the GCDForm component\nvar _c;\n$RefreshReg$(_c, \"GCDForm\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","gcd","a","b","temp","gcdOfArray","numbers","length","result","i","GCDForm","_s","handleSubmit","event","preventDefault","inputNumbers","target","elements","value","numbersArray","split","map","Number","gcdResult","setResult","useState","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","_c","$RefreshReg$"],"sources":["C:/Users/ShriGanU/OneDrive - Unisys/Desktop/Vs code/gcd01/src/App.js"],"sourcesContent":["import React from 'react';\n\nfunction gcd(a, b) {\n    // Euclidean algorithm to find GCD\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nfunction gcdOfArray(numbers) {\n    if (numbers.length === 0) {\n        return null; // No numbers provided\n    }\n    \n    let result = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        result = gcd(result, numbers[i]);\n    }\n    return result;\n}\n\nfunction GCDForm() {\n    const handleSubmit = (event) => {\n        event.preventDefault(); // Prevent default form submission\n        \n        const inputNumbers = event.target.elements.numbers.value;\n        const numbersArray = inputNumbers.split(\",\").map(Number); // Convert string input to array of numbers\n        \n        const gcdResult = gcdOfArray(numbersArray);\n        if (gcdResult !== null) {\n            // Update state to display the result\n            setResult(\"GCD of \" + inputNumbers + \" is \" + gcdResult);\n        } else {\n            // Update state to display an error message\n            setResult(\"Please enter valid numbers\");\n        }\n    };\n\n    // State to store the result or error message\n    const [result, setResult] = React.useState('');\n\n    return (\n        <div>\n            <h1>GCD Calculator</h1>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"numbers\">Enter numbers separated by commas:</label><br />\n                <input type=\"text\" id=\"numbers\" name=\"numbers\" /><br />\n                <button type=\"submit\">Calculate GCD</button>\n            </form>\n            {/* Display the result or error message */}\n            <div id=\"result\">{result}</div>\n        </div>\n    );\n}\n\nexport default GCDForm; // Exporting the GCDForm component\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}